/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../../prisma-db-connection/src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Ad: { // root type
    adId: number; // Int!
    adminId: number; // Int!
    categoryId: number; // Int!
    creationDate: NexusGenScalars['DateTime']; // DateTime!
    detail: string; // String!
    keywords: string[]; // [String!]!
    photos: string[]; // [String!]!
    publisherId: number; // Int!
    title: string; // String!
  }
  Admin: { // root type
    adminId: number; // Int!
    userId: number; // Int!
  }
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Category: { // root type
    categoryId: number; // Int!
    title: string; // String!
  }
  Client: { // root type
    clientId: number; // Int!
    userId: number; // Int!
  }
  Mutation: {};
  Publisher: { // root type
    cellphone: string; // String!
    photo: string; // String!
    publisherId: number; // Int!
    userId: number; // Int!
  }
  Query: {};
  SuggestedCategory: { // root type
    suggestedCategoryId: number; // Int!
    title: string; // String!
  }
  User: { // root type
    email: string; // String!
    lastName: string; // String!
    name: string; // String!
    password: string; // String!
    userId: number; // Int!
    userName: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Ad: { // field return type
    adId: number; // Int!
    adminCreator: NexusGenRootTypes['Admin'] | null; // Admin
    adminId: number; // Int!
    category: NexusGenRootTypes['Category'] | null; // Category
    categoryId: number; // Int!
    creationDate: NexusGenScalars['DateTime']; // DateTime!
    detail: string; // String!
    keywords: string[]; // [String!]!
    photos: string[]; // [String!]!
    publishedBy: NexusGenRootTypes['Publisher'] | null; // Publisher
    publisherId: number; // Int!
    title: string; // String!
  }
  Admin: { // field return type
    adminId: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
    userId: number; // Int!
  }
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Category: { // field return type
    categoryId: number; // Int!
    title: string; // String!
  }
  Client: { // field return type
    clientId: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
    userId: number; // Int!
  }
  Mutation: { // field return type
    addAd: NexusGenRootTypes['Ad']; // Ad!
    addAdmin: NexusGenRootTypes['Admin']; // Admin!
    addCategory: NexusGenRootTypes['Category']; // Category!
    addClient: NexusGenRootTypes['Client']; // Client!
    addPublisher: NexusGenRootTypes['Publisher']; // Publisher!
    addSuggestedCategory: NexusGenRootTypes['SuggestedCategory']; // SuggestedCategory!
    addUser: NexusGenRootTypes['User']; // User!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    removeAdd: NexusGenRootTypes['Ad']; // Ad!
    removeAdmin: NexusGenRootTypes['Admin']; // Admin!
    removeCategory: NexusGenRootTypes['Category']; // Category!
    removeClient: NexusGenRootTypes['Client']; // Client!
    removePublisher: NexusGenRootTypes['Publisher']; // Publisher!
    removeSuggestedCategory: NexusGenRootTypes['SuggestedCategory']; // SuggestedCategory!
    removeUser: NexusGenRootTypes['User']; // User!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updatePublisher: NexusGenRootTypes['Publisher']; // Publisher!
    updateUser: NexusGenRootTypes['User']; // User!
  }
  Publisher: { // field return type
    cellphone: string; // String!
    photo: string; // String!
    publisherId: number; // Int!
    user: NexusGenRootTypes['User'] | null; // User
    userId: number; // Int!
  }
  Query: { // field return type
    ad: NexusGenRootTypes['Ad'][]; // [Ad!]!
    admin: NexusGenRootTypes['Admin'][]; // [Admin!]!
    admins: NexusGenRootTypes['Admin'][]; // [Admin!]!
    ads: NexusGenRootTypes['Ad'][]; // [Ad!]!
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    category: NexusGenRootTypes['Category'][]; // [Category!]!
    client: NexusGenRootTypes['Client'][]; // [Client!]!
    clients: NexusGenRootTypes['Client'][]; // [Client!]!
    publisher: NexusGenRootTypes['Publisher'][]; // [Publisher!]!
    publishers: NexusGenRootTypes['Publisher'][]; // [Publisher!]!
    suggestedCategories: NexusGenRootTypes['SuggestedCategory'][]; // [SuggestedCategory!]!
    suggestedCategory: NexusGenRootTypes['SuggestedCategory'][]; // [SuggestedCategory!]!
    user: NexusGenRootTypes['User'][]; // [User!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  SuggestedCategory: { // field return type
    suggestedCategoryId: number; // Int!
    title: string; // String!
  }
  User: { // field return type
    email: string; // String!
    lastName: string; // String!
    name: string; // String!
    password: string; // String!
    userId: number; // Int!
    userName: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Ad: { // field return type name
    adId: 'Int'
    adminCreator: 'Admin'
    adminId: 'Int'
    category: 'Category'
    categoryId: 'Int'
    creationDate: 'DateTime'
    detail: 'String'
    keywords: 'String'
    photos: 'String'
    publishedBy: 'Publisher'
    publisherId: 'Int'
    title: 'String'
  }
  Admin: { // field return type name
    adminId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Category: { // field return type name
    categoryId: 'Int'
    title: 'String'
  }
  Client: { // field return type name
    clientId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Mutation: { // field return type name
    addAd: 'Ad'
    addAdmin: 'Admin'
    addCategory: 'Category'
    addClient: 'Client'
    addPublisher: 'Publisher'
    addSuggestedCategory: 'SuggestedCategory'
    addUser: 'User'
    login: 'AuthPayload'
    removeAdd: 'Ad'
    removeAdmin: 'Admin'
    removeCategory: 'Category'
    removeClient: 'Client'
    removePublisher: 'Publisher'
    removeSuggestedCategory: 'SuggestedCategory'
    removeUser: 'User'
    signup: 'AuthPayload'
    updatePublisher: 'Publisher'
    updateUser: 'User'
  }
  Publisher: { // field return type name
    cellphone: 'String'
    photo: 'String'
    publisherId: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Query: { // field return type name
    ad: 'Ad'
    admin: 'Admin'
    admins: 'Admin'
    ads: 'Ad'
    categories: 'Category'
    category: 'Category'
    client: 'Client'
    clients: 'Client'
    publisher: 'Publisher'
    publishers: 'Publisher'
    suggestedCategories: 'SuggestedCategory'
    suggestedCategory: 'SuggestedCategory'
    user: 'User'
    users: 'User'
  }
  SuggestedCategory: { // field return type name
    suggestedCategoryId: 'Int'
    title: 'String'
  }
  User: { // field return type name
    email: 'String'
    lastName: 'String'
    name: 'String'
    password: 'String'
    userId: 'Int'
    userName: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addAd: { // args
      adminId: number; // Int!
      categoryId?: number | null; // Int
      detail: string; // String!
      keywords: string[]; // [String!]!
      photos: string[]; // [String!]!
      publisherId: number; // Int!
      title: string; // String!
    }
    addAdmin: { // args
      userId: number; // Int!
    }
    addCategory: { // args
      title: string; // String!
    }
    addClient: { // args
      userId: number; // Int!
    }
    addPublisher: { // args
      cellphone: string; // String!
      photo: string; // String!
      userId: number; // Int!
    }
    addSuggestedCategory: { // args
      title: string; // String!
    }
    addUser: { // args
      email: string; // String!
      lastName: string; // String!
      name: string; // String!
      password: string; // String!
      userName: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    removeAdd: { // args
      adId: number; // Int!
    }
    removeAdmin: { // args
      adminId: number; // Int!
    }
    removeCategory: { // args
      categoryId: number; // Int!
    }
    removeClient: { // args
      clientId: number; // Int!
    }
    removePublisher: { // args
      publisherId: number; // Int!
    }
    removeSuggestedCategory: { // args
      suggestedCategoryId: number; // Int!
    }
    removeUser: { // args
      userId: number; // Int!
    }
    signup: { // args
      email: string; // String!
      lastName: string; // String!
      name: string; // String!
      password: string; // String!
      userName: string; // String!
    }
    updatePublisher: { // args
      cellphone?: string | null; // String
      photo?: string | null; // String
      publisherId: number; // Int!
    }
    updateUser: { // args
      email?: string | null; // String
      lastName?: string | null; // String
      name?: string | null; // String
      userId: number; // Int!
      userName?: string | null; // String
    }
  }
  Query: {
    ad: { // args
      adId: number; // Int!
    }
    admin: { // args
      userId: number; // Int!
    }
    category: { // args
      categoryId: number; // Int!
    }
    client: { // args
      userId: number; // Int!
    }
    publisher: { // args
      userId: number; // Int!
    }
    suggestedCategory: { // args
      suggestedCategoryId: number; // Int!
    }
    user: { // args
      userId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}